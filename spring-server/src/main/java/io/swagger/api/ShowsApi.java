/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.Show;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-29T10:44:37.067Z")

@Api(value = "shows", description = "the shows API")
public interface ShowsApi {

    @ApiOperation(value = "add a new  show", nickname = "createShow", notes = "new show is created", tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "New show is created"),
        @ApiResponse(code = 400, message = "Invalid Show", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/shows",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createShow(@ApiParam(value = "Here is the show data required to create a show" ,required=true )  @Valid @RequestBody Show body);


    @ApiOperation(value = "returns a show", nickname = "getShow", notes = "return details of a show given its id", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Show.class),
        @ApiResponse(code = 404, message = "Show not found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/shows/{id_show}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Show> getShow(@ApiParam(value = "",required=true) @PathVariable("id_show") Integer idShow);


    @ApiOperation(value = "returns list of shows", nickname = "getShows", notes = "returns list of shows availables", response = Show.class, responseContainer = "List", tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Show.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/shows",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Show>> getShows();


    @ApiOperation(value = "delete a show", nickname = "showsIdShowDelete", notes = "delete a show", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Show was sucessfully deleted", response = Show.class),
        @ApiResponse(code = 404, message = "Show Id does not exist", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/shows/{id_show}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Show> showsIdShowDelete(@ApiParam(value = "",required=true) @PathVariable("id_show") Integer idShow);


    @ApiOperation(value = "edit a show", nickname = "showsIdShowPut", notes = "a show is edited", tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "show is updated"),
        @ApiResponse(code = 400, message = "Invalid Show", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/shows/{id_show}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> showsIdShowPut(@ApiParam(value = "",required=true) @PathVariable("id_show") Integer idShow,@ApiParam(value = "data show to edit" ,required=true )  @Valid @RequestBody Show body);

}
